{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/inas%20farras/OneDrive%20-%20%E5%9C%8B%E7%AB%8B%E6%9D%B1%E8%8F%AF%E5%A4%A7%E5%AD%B8/%E6%A1%8C%E9%9D%A2/Project/milestone/src/data/projects.ts"],"sourcesContent":["import { Status } from '@/components/ui/Card';\n\nexport interface Project {\n  id: string;\n  title: string;\n  description: string;\n  status: Status;\n  githubLink?: string;\n  tags: string[];\n  detailsLink?: string;\n  month: number;\n  icon: string;\n  keyLearnings?: string[];\n}\n\nexport const projects: Project[] = [\n  {\n    id: 'textcrunch',\n    title: 'TextCrunch',\n    description: 'CLI app to tokenize text and count word frequencies',\n    status: 'Completed',\n    tags: ['Python', 'NLP', 'CLI'],\n    githubLink: '#',\n    detailsLink: '/milestones/textcrunch',\n    month: 1,\n    icon: '📝',\n    keyLearnings: [\n      'Python basics for text processing',\n      'Command-line interface development',\n      'Basic natural language processing techniques',\n      'Word frequency analysis and tokenization'\n    ]\n  },\n  {\n    id: 'spamguard',\n    title: 'SpamGuard',\n    description: 'A text classifier for spam detection using scikit-learn',\n    status: 'Not Started',\n    tags: ['Python', 'Scikit-learn', 'ML', 'Classification'],\n    githubLink: '#',\n    detailsLink: '/milestones/spamguard',\n    month: 1,\n    icon: '🛡️',\n    keyLearnings: [\n      'Machine learning basics',\n      'Text classification techniques',\n      'Feature extraction from text',\n      'Model evaluation and performance metrics'\n    ]\n  },\n  {\n    id: 'quickchat',\n    title: 'QuickChat',\n    description: 'A chatbot using OpenAI API or HuggingFace Inference API',\n    status: 'In Progress',\n    tags: ['Python', 'FastAPI', 'LLM', 'API Integration'],\n    githubLink: '#',\n    detailsLink: '/milestones/quickchat',\n    month: 2,\n    icon: '💬',\n    keyLearnings: [\n      'API integration with LLM services',\n      'Basic LLM usage and limitations',\n      'Simple frontend development',\n      'Handling user inputs and responses'\n    ]\n  },\n  {\n    id: 'promptforge',\n    title: 'PromptForge',\n    description: 'Design few-shot and chain-of-thought prompt templates for smarter LLM outputs',\n    status: 'Not Started',\n    tags: ['Prompt Engineering', 'LLM', 'Few-shot Learning'],\n    githubLink: '#',\n    detailsLink: '/milestones/promptforge',\n    month: 2,\n    icon: '⚒️',\n    keyLearnings: [\n      'Prompt engineering techniques',\n      'Few-shot learning patterns',\n      'Chain-of-thought prompting',\n      'Creative LLM usage strategies'\n    ]\n  },\n  {\n    id: 'finetunex',\n    title: 'FineTuneX',\n    description: 'Fine-tune a small model like T5 or DistilBERT for a specific task',\n    status: 'Completed',\n    tags: ['Python', 'PyTorch', 'HuggingFace', 'Fine-tuning'],\n    githubLink: '#',\n    detailsLink: '/milestones/finetunex',\n    month: 3,\n    icon: '🔧',\n    keyLearnings: [\n      'HuggingFace Transformers library',\n      'Model fine-tuning workflows',\n      'Supervised learning for NLP tasks',\n      'Performance optimization for transformer models'\n    ]\n  },\n  {\n    id: 'thesis-proposal',\n    title: 'Thesis Proposal',\n    description: 'Finalize and submit Master Thesis Proposal related to LLMs',\n    status: 'Not Started',\n    tags: ['Research', 'Academic Writing', 'LLM'],\n    githubLink: '#',\n    detailsLink: '/milestones/thesis-proposal',\n    month: 3,\n    icon: '📚',\n    keyLearnings: [\n      'Research writing skills',\n      'Academic planning and methodology',\n      'Literature review techniques',\n      'Research question formulation'\n    ]\n  },\n  {\n    id: 'modelserve',\n    title: 'ModelServe',\n    description: 'Deploy your fine-tuned model with FastAPI',\n    status: 'Not Started',\n    tags: ['Python', 'FastAPI', 'Deployment', 'MLOps'],\n    githubLink: '#',\n    detailsLink: '/milestones/modelserve',\n    month: 4,\n    icon: '🚀',\n    keyLearnings: [\n      'Model serving best practices',\n      'API design and development',\n      'Backend architecture fundamentals',\n      'Deployment workflows'\n    ]\n  },\n  {\n    id: 'docuchat',\n    title: 'DocuChat',\n    description: 'Build a Retrieval-Augmented Generation (RAG) Q&A bot using FAISS',\n    status: 'Not Started',\n    tags: ['Python', 'RAG', 'FAISS', 'Vector Database'],\n    githubLink: '#',\n    detailsLink: '/milestones/docuchat',\n    month: 4,\n    icon: '🔍',\n    keyLearnings: [\n      'Retrieval-Augmented Generation architecture',\n      'Vector embeddings and similarity search',\n      'FAISS for efficient vector storage',\n      'Building intelligent QA systems'\n    ]\n  },\n  {\n    id: 'agenthive',\n    title: 'AgentHive',\n    description: 'Build a basic multi-agent system where different LLMs collaborate',\n    status: 'Not Started',\n    tags: ['Python', 'Multi-Agent', 'LangChain', 'System Design'],\n    githubLink: '#',\n    detailsLink: '/milestones/agenthive',\n    month: 5,\n    icon: '🐝',\n    keyLearnings: [\n      'Multi-agent system design',\n      'Chain-of-agents architecture',\n      'LangChain basics',\n      'Agent communication protocols'\n    ]\n  },\n  {\n    id: 'thesis-finalization',\n    title: 'Thesis Finalization',\n    description: 'Complete Master Thesis — system, experiments, and writing',\n    status: 'Not Started',\n    tags: ['Research', 'Academic Writing', 'LLM', 'Experimentation'],\n    githubLink: '#',\n    detailsLink: '/milestones/thesis-finalization',\n    month: 5,\n    icon: '🎓',\n    keyLearnings: [\n      'Full research project execution',\n      'Academic documentation',\n      'Experimental design and analysis',\n      'Thesis defense preparation'\n    ]\n  },\n  {\n    id: 'qlora-finetuning',\n    title: 'QLoRA Fine-tuning',\n    description: 'Implement QLoRA fine-tuning on a bigger model (LLaMA 2 7B, Mistral)',\n    status: 'Not Started',\n    tags: ['Python', 'QLoRA', 'Parameter-Efficient Fine-tuning', 'Large LMs'],\n    githubLink: '#',\n    detailsLink: '/milestones/qlora-finetuning',\n    month: 5,\n    icon: '🔬',\n    keyLearnings: [\n      'Quantized low-rank adaptation techniques',\n      'Working with larger language models',\n      'Advanced fine-tuning strategies',\n      'Memory optimization for LLM training'\n    ]\n  },\n  {\n    id: 'langchain-agent',\n    title: 'LangChain Memory Agent',\n    description: 'Build a LangChain Agent with a memory component (persistent knowledge)',\n    status: 'Not Started',\n    tags: ['Python', 'LangChain', 'Agent', 'Memory Systems'],\n    githubLink: '#',\n    detailsLink: '/milestones/langchain-agent',\n    month: 5,\n    icon: '🧠',\n    keyLearnings: [\n      'LangChain agent development',\n      'Memory components for LLM applications',\n      'Persistent knowledge management',\n      'Advanced agent architecture'\n    ]\n  }\n]; "],"names":[],"mappings":";;;AAeO,MAAM,WAAsB;IACjC;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAO;SAAM;QAC9B,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAgB;YAAM;SAAiB;QACxD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAW;YAAO;SAAkB;QACrD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAsB;YAAO;SAAoB;QACxD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAW;YAAe;SAAc;QACzD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAY;YAAoB;SAAM;QAC7C,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAW;YAAc;SAAQ;QAClD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAO;YAAS;SAAkB;QACnD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAe;YAAa;SAAgB;QAC7D,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAY;YAAoB;YAAO;SAAkB;QAChE,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAS;YAAmC;SAAY;QACzE,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;IACA;QACE,IAAI;QACJ,OAAO;QACP,aAAa;QACb,QAAQ;QACR,MAAM;YAAC;YAAU;YAAa;YAAS;SAAiB;QACxD,YAAY;QACZ,aAAa;QACb,OAAO;QACP,MAAM;QACN,cAAc;YACZ;YACA;YACA;YACA;SACD;IACH;CACD","debugId":null}},
    {"offset": {"line": 287, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/inas%20farras/OneDrive%20-%20%E5%9C%8B%E7%AB%8B%E6%9D%B1%E8%8F%AF%E5%A4%A7%E5%AD%B8/%E6%A1%8C%E9%9D%A2/Project/milestone/src/context/ProjectContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Project, projects as initialProjects } from '@/data/projects';\r\n\r\ninterface ProjectContextType {\r\n  projects: Project[];\r\n  updateProjectStatus: (projectId: string, newStatus: 'Completed' | 'In Progress' | 'Not Started') => void;\r\n  stats: {\r\n    completed: number;\r\n    inProgress: number;\r\n    notStarted: number;\r\n    total: number;\r\n    completedPercentage: number;\r\n  };\r\n}\r\n\r\nconst ProjectContext = createContext<ProjectContextType | undefined>(undefined);\r\n\r\ninterface ProjectProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ProjectProvider = ({ children }: ProjectProviderProps) => {\r\n  const [projects, setProjects] = useState<Project[]>(initialProjects);\r\n  const [stats, setStats] = useState({\r\n    completed: 0,\r\n    inProgress: 0,\r\n    notStarted: 0,\r\n    total: initialProjects.length,\r\n    completedPercentage: 0,\r\n  });\r\n  \r\n  // Calculate stats whenever projects change\r\n  useEffect(() => {\r\n    const completed = projects.filter(p => p.status === 'Completed').length;\r\n    const inProgress = projects.filter(p => p.status === 'In Progress').length;\r\n    const notStarted = projects.filter(p => p.status === 'Not Started').length;\r\n    \r\n    setStats({\r\n      completed,\r\n      inProgress,\r\n      notStarted,\r\n      total: projects.length,\r\n      completedPercentage: Math.round((completed / projects.length) * 100)\r\n    });\r\n  }, [projects]);\r\n  \r\n  const updateProjectStatus = (projectId: string, newStatus: 'Completed' | 'In Progress' | 'Not Started') => {\r\n    setProjects(prevProjects => \r\n      prevProjects.map(project => \r\n        project.id === projectId \r\n          ? { ...project, status: newStatus } \r\n          : project\r\n      )\r\n    );\r\n    \r\n    // Store updated projects in localStorage with current state\r\n    try {\r\n      const updatedProjects = projects.map(p => p.id === projectId ? { ...p, status: newStatus } : p);\r\n      localStorage.setItem('projectStatuses', JSON.stringify(\r\n        updatedProjects.map(p => ({ id: p.id, status: p.status }))\r\n      ));\r\n    } catch (error) {\r\n      console.error('Error saving to localStorage:', error);\r\n    }\r\n  };\r\n  \r\n  // Load saved statuses from localStorage on initial load\r\n  useEffect(() => {\r\n    try {\r\n      const savedStatuses = localStorage.getItem('projectStatuses');\r\n      \r\n      if (savedStatuses) {\r\n        const parsedStatuses = JSON.parse(savedStatuses) as { id: string; status: 'Completed' | 'In Progress' | 'Not Started' }[];\r\n        \r\n        // Apply saved statuses to projects\r\n        setProjects(prevProjects => \r\n          prevProjects.map(project => {\r\n            const savedStatus = parsedStatuses.find(s => s.id === project.id);\r\n            return savedStatus ? { ...project, status: savedStatus.status } : project;\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading from localStorage:', error);\r\n    }\r\n  }, []);\r\n  \r\n  return (\r\n    <ProjectContext.Provider value={{ projects, updateProjectStatus, stats }}>\r\n      {children}\r\n    </ProjectContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProjects = () => {\r\n  const context = useContext(ProjectContext);\r\n  if (context === undefined) {\r\n    throw new Error('useProjects must be used within a ProjectProvider');\r\n  }\r\n  return context;\r\n}; "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAiBA,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAkC;AAM9D,MAAM,kBAAkB,CAAC,EAAE,QAAQ,EAAwB;IAChE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,uHAAA,CAAA,WAAe;IACnE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACjC,WAAW;QACX,YAAY;QACZ,YAAY;QACZ,OAAO,uHAAA,CAAA,WAAe,CAAC,MAAM;QAC7B,qBAAqB;IACvB;IAEA,2CAA2C;IAC3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,YAAY,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,aAAa,MAAM;QACvE,MAAM,aAAa,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,eAAe,MAAM;QAC1E,MAAM,aAAa,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,eAAe,MAAM;QAE1E,SAAS;YACP;YACA;YACA;YACA,OAAO,SAAS,MAAM;YACtB,qBAAqB,KAAK,KAAK,CAAC,AAAC,YAAY,SAAS,MAAM,GAAI;QAClE;IACF,GAAG;QAAC;KAAS;IAEb,MAAM,sBAAsB,CAAC,WAAmB;QAC9C,YAAY,CAAA,eACV,aAAa,GAAG,CAAC,CAAA,UACf,QAAQ,EAAE,KAAK,YACX;oBAAE,GAAG,OAAO;oBAAE,QAAQ;gBAAU,IAChC;QAIR,4DAA4D;QAC5D,IAAI;YACF,MAAM,kBAAkB,SAAS,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,YAAY;oBAAE,GAAG,CAAC;oBAAE,QAAQ;gBAAU,IAAI;YAC7F,aAAa,OAAO,CAAC,mBAAmB,KAAK,SAAS,CACpD,gBAAgB,GAAG,CAAC,CAAA,IAAK,CAAC;oBAAE,IAAI,EAAE,EAAE;oBAAE,QAAQ,EAAE,MAAM;gBAAC,CAAC;QAE5D,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;QACjD;IACF;IAEA,wDAAwD;IACxD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI;YACF,MAAM,gBAAgB,aAAa,OAAO,CAAC;YAE3C,IAAI,eAAe;gBACjB,MAAM,iBAAiB,KAAK,KAAK,CAAC;gBAElC,mCAAmC;gBACnC,YAAY,CAAA,eACV,aAAa,GAAG,CAAC,CAAA;wBACf,MAAM,cAAc,eAAe,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,QAAQ,EAAE;wBAChE,OAAO,cAAc;4BAAE,GAAG,OAAO;4BAAE,QAAQ,YAAY,MAAM;wBAAC,IAAI;oBACpE;YAEJ;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;QACpD;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;YAAU;YAAqB;QAAM;kBACpE;;;;;;AAGP;AAEO,MAAM,cAAc;IACzB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/inas%20farras/OneDrive%20-%20%E5%9C%8B%E7%AB%8B%E6%9D%B1%E8%8F%AF%E5%A4%A7%E5%AD%B8/%E6%A1%8C%E9%9D%A2/Project/milestone/node_modules/next/src/server/route-modules/app-page/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n    } else if (process.env.TURBOPACK) {\n      module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n    } else {\n      module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n    }\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK"],"mappings":";AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,uBAA2B,EAAF;;IAQzC,OAAO;QACL,IAAIN,QAAQC,GAAG,CAACM,QAAQ,KAAK,WAAe;YAC1CJ,OAAOC,OAAO,GAAGC,QAAQ;QAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACO,SAAS,EAAE;;QAIlC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/inas%20farras/OneDrive%20-%20%E5%9C%8B%E7%AB%8B%E6%9D%B1%E8%8F%AF%E5%A4%A7%E5%AD%B8/%E6%A1%8C%E9%9D%A2/Project/milestone/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/inas%20farras/OneDrive%20-%20%E5%9C%8B%E7%AB%8B%E6%9D%B1%E8%8F%AF%E5%A4%A7%E5%AD%B8/%E6%A1%8C%E9%9D%A2/Project/milestone/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored['react-ssr'].React\n"],"names":["module","exports","require","vendored","React"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CAAC,YAAY,CAACC,KAAK","ignoreList":[0],"debugId":null}}]
}